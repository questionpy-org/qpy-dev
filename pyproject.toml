[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "qpy-dev"
description = "Dev repository to facilitate multi-repo development for QuestionPy"
authors = ["Technische Universit√§t Berlin, innoCampus <info@isis.tu-berlin.de>"]
license = "MIT"
homepage = "https://questionpy.org"
version = "0.0.0"

[tool.poetry.dependencies]
python = "^3.9"
poethepoet = "^0.24.4"
poetry = "^1.7.1"
watchdog = {version = "^4.0.0", extras = ["watchmedo"]}
tox = "^4.13.0"

[tool.mypy]
disallow_untyped_defs = true
strict_optional = true
show_error_codes = true
exclude = [
  # mypy complains about Duplicate module named "tests"
  "^questionpy/.+\\.py$",
]

[tool.poe]
verbosity = -1
envfile = [
  ".env",
  ".env.local",
]
include = [
  "./modules/utils.toml",
  "./modules/qpy.toml",
  "./modules/lint.toml",
  "./modules/fmt.toml",
  "./modules/typecheck.toml",
  "./modules/test.toml",
  "./modules/tox.toml",
  "./modules/repos.toml",
  "./modules/venv.toml",
  "./modules/moodle.toml",
]

[tool.poe.env]
COLOR_TASK = '\033[0;34m'
COLOR_MSG = '\033[1;37m'
COLOR_ERR = '\033[1;31m'
COLOR_OFF = '\033[0m'
# FIXME: set moodle-docker env vars globally once bug is resolved
# https://github.com/nat-n/poethepoet/issues/198
# MOODLE_DOCKER_WWWROOT = "${POE_ROOT}/vendor/moodle"
# COMPOSE_PROJECT_NAME= "${MOODLE_DOCKER_COMPOSE_PROJECT_NAME}"

[tool.ruff]
extend = "ruff_defaults.toml"

[tool.ruff.lint.extend-per-file-ignores]
"modules/**/*.py" = [
  "INP001",
  "T201",
]
"scratch/**/*.py" = [
  "INP001",
  "T201",
]

[tool.tox]
legacy_tox_ini = """
[tox]
env_list =
  py{39,310,311}-{common,sdk,server}-test
  {common,sdk,server}-{format,lint}
  {common,sdk,server}-typecheck

minversion = 4.13.0

[testenv]
allowlist_externals = poetry
skip_install = true
change_dir =
  common: questionpy/common
  sdk: questionpy/sdk
  server: questionpy/server

[testenv:py{39,310,311}-{common,sdk,server}-test]
commands_pre = poetry install --no-root --only main,test
commands = coverage run -m pytest {tty:--color=yes} tests {posargs}

[testenv:{common,sdk,server}-{format,lint}]
commands_pre = poetry install --no-root --only linter
commands =
  ruff-format: ruff format --check {posargs:.}
  ruff-lint: ruff check {posargs:.}

[testenv:{common,sdk,server}-typecheck]
commands_pre = poetry install --no-root --only main,test,type-checker
commands = mypy {posargs:questionpy_common tests}
"""
