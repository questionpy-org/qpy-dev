### moodle:start

[tool.poe.tasks."moodle:start"]
help = "Start Moodle Docker stack."
cwd = "./external/moodle-docker"
deps = [
  "_clone:ensure-repos:moodle",
  "_moodle:add-local-yml",
  "_moodle:ensure-moodle-config",
  "_moodle:ensure-docker",
  "_utils:msg moodle:start",
]
sequence = [
  "_moodle:hook MOODLE_DOCKER_PRE_START_HOOK '${COLOR_TASK}[moodle:start] ${COLOR_MSG}Pre-start hook...${COLOR_OFF}'",
  { cmd = "./bin/moodle-docker-compose up -d" },
  '_utils:msg moodle:start "Waiting for DB..."',
  { cmd = "./bin/moodle-docker-wait-for-db" },
  "_moodle:hook MOODLE_DOCKER_POST_START_HOOK '${COLOR_TASK}[moodle:start] ${COLOR_MSG}Post-start hook...${COLOR_OFF}'",
  '_utils:msg moodle:start "Moodle running on http://localhost:${MOODLE_DOCKER_WEB_PORT}/"',
]

### moodle:stop

[tool.poe.tasks."moodle:stop"]
help = "Stop Moodle stack."
cwd = "./external/moodle-docker"
deps = [
  "_clone:ensure-repos:moodle",
  "_moodle:ensure-docker",
  "_utils:msg moodle:stop",
]
sequence = [
  "_moodle:hook MOODLE_DOCKER_PRE_STOP_HOOK '${COLOR_TASK}[moodle:stop] ${COLOR_MSG}Pre-stop hook...${COLOR_OFF}'",
  { cmd = "./bin/moodle-docker-compose stop" },
  "_moodle:hook MOODLE_DOCKER_POST_STOP_HOOK '${COLOR_TASK}[moodle:stop] ${COLOR_MSG}Post-stop hook...${COLOR_OFF}'",
]

### moodle:rm

[tool.poe.tasks."moodle:rm"]
help = "Destroy Moodle stack (clear database)."
cwd = "./external/moodle-docker"
deps = [
  "_clone:ensure-repos:moodle",
  "_moodle:ensure-docker",
  "_utils:msg moodle:rm",
]
cmd = "./bin/moodle-docker-compose rm --volumes"

### moodle:logs

[tool.poe.tasks."moodle:logs"]
help = "Follow Moodle logs."
cwd = "./external/moodle-docker"
deps = [
  "_clone:ensure-repos:moodle",
  "_moodle:ensure-docker",
  "_utils:msg moodle:logs",
]
cmd = "./bin/moodle-docker-compose logs --follow --tail=100 webserver"

### moodle:docker-compose

[tool.poe.tasks."moodle:docker-compose"]
help = "Moodle docker-compose command."
cwd = "./external/moodle-docker"
deps = [
  "_clone:ensure-repos:moodle",
  "_moodle:ensure-docker",
  "_utils:msg moodle:docker-compose",
]
cmd = "./bin/moodle-docker-compose"

### moodle:test

[tool.poe.tasks."moodle:test"]
help = "Run PHPUnit tests."
cwd = "./external/moodle-docker"
deps = [
  "_clone:ensure-repos:moodle",
  "_moodle:ensure-docker",
  "_moodle:ensure-moodle-docker-running",
  "_moodle:ensure-phpunit-initialised",
  "_utils:msg moodle:test",
]
cmd = "./bin/moodle-docker-compose exec webserver vendor/bin/phpunit question/type/questionpy/tests/$source --test-suffix=_test.php"

  [[tool.poe.tasks."moodle:test".args]]
  name = "source"
  positional = true
  help = "Test file or directory relative to `moodle-qtype/tests/`."
  default = "."

### moodle:lint

[tool.poe.tasks."moodle:lint"]
help = "Run PHP_CodeSniffer linter."
cwd = "./external/moodle/question/type/questionpy"
deps = [
  "_clone:ensure-repos:moodle",
  "_clone:ensure-repos:qtype",
  "_moodle:ensure-codesniffer phpcs",
  "_utils:msg moodle:lint",
]
cmd = "phpcs $source -p --colors"

  [[tool.poe.tasks."moodle:lint".args]]
  name = "source"
  positional = true
  help = "File or directory relative to `moodle-qtype/`."
  default = "."

### moodle:fmt

[tool.poe.tasks."moodle:fmt"]
help = "Run PHP_CodeSniffer formatter."
cwd = "./external/moodle/question/type/questionpy"
deps = [
  "_clone:ensure-repos:moodle",
  "_clone:ensure-repos:qtype",
  "_moodle:ensure-codesniffer phpcbf",
  "_utils:msg moodle:fmt",
]
cmd = "phpcbf $source -p --colors"

  [[tool.poe.tasks."moodle:fmt".args]]
  name = "source"
  positional = true
  help = "File or directory relative to `moodle-qtype/`."
  default = "."

### private tasks

# Patch webserver service
# - Add entry to /etc/hosts file, so that Moodle can access the QPy server
#   using a fixed host name.
# - Add qtype-questionpy as mounted volume.
[tool.poe.tasks."_moodle:add-local-yml"]
cwd = "./external/moodle-docker"
deps = ["_clone:ensure-repos:qtype"]
shell = """
  [[ -f local.yml ]] && exit 0
  echo 'services:
    webserver:
      extra_hosts:
        - "host.docker.internal:host-gateway"' > local.yml
"""

[tool.poe.tasks."_moodle:ensure-moodle-config"]
shell = """
  [[ -f external/moodle/config.php ]] && exit 0
  cp external/moodle-docker/config.docker-template.php external/moodle/config.php
"""

[tool.poe.tasks."_moodle:ensure-docker"]
shell = """
  if ! $(docker info >/dev/null 2>&1); then
    echo -e "${COLOR_WARN}Docker daemon is not running!${COLOR_OFF}"
    exit 1
  fi
"""

[tool.poe.tasks."_moodle:ensure-moodle-docker-running"]
cwd = "./external/moodle-docker"
shell = """
  if ! $(./bin/moodle-docker-compose exec webserver echo >/dev/null 2>&1); then
    echo -e "${COLOR_WARN}Moodle docker is not running!${COLOR_OFF}"
    echo -e "${COLOR_WARN}Use ${COLOR_TASK}[moodle:start]${COLOR_WARN} to start the stack.${COLOR_OFF}"
    exit 1
  fi
"""

[tool.poe.tasks."_moodle:ensure-phpunit-initialised"]
cwd = "./external/moodle-docker"
shell = """
  if ! $(./bin/moodle-docker-compose exec webserver vendor/bin/phpunit question/type/questionpy --list-tests >/dev/null 2>&1); then
    ./bin/moodle-docker-compose exec -T webserver php admin/tool/phpunit/cli/init.php
  fi
"""

[tool.poe.tasks."_moodle:ensure-codesniffer"]
shell = """
  # Check if the script is installed.
  if ! $(command -v $script >/dev/null 2>&1); then
    echo -e "${COLOR_WARN}Could not find '${COLOR_MSG}$script${COLOR_OFF}${COLOR_WARN}'!${COLOR_OFF}"
    echo -e "${COLOR_WARN}Please install it with${COLOR_OFF}"
    echo -e "    ${COLOR_MSG}composer global require 'squizlabs/php_codesniffer=*'${COLOR_OFF}"
    exit 1
  fi

  # Check if the 'moodle-extra' ruleset is installed.
  if ! $($script -i | grep -w moodle-extra >/dev/null 2>&1); then
    echo -e "${COLOR_WARN}Could not find the '${COLOR_MSG}moodle-extra${COLOR_OFF}${COLOR_WARN}' ruleset!${COLOR_OFF}"
    echo -e "${COLOR_WARN}Please install it with${COLOR_OFF}"
    echo -e "    ${COLOR_MSG}composer global config minimum-stability dev${COLOR_OFF}"
    echo -e "    ${COLOR_MSG}composer global require moodlehq/moodle-cs${COLOR_OFF}"
    exit 1
  fi
"""

    [[tool.poe.tasks."_moodle:ensure-codesniffer".args]]
    name = "script"
    positional = true
    required = true

[tool.poe.tasks."_moodle:hook"]
shell = """
  if [[ -n "${!name}" ]]; then
    echo -e "${msg}${COLOR_OFF}"
    eval "${!name}"
  fi
"""
args = [
  { "name" = "name", positional = true, required = true },
  { "name" = "msg",  positional = true, required = true },
]
